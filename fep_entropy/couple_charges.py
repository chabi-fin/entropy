import os
from sys import argv, exit
import numpy as np

def main(argv):

    # Assign command line arguements
    sysA = argv[1]
    sysB = argv[2]
    coupl_param = float(argv[3])
    temperature = argv[4]

    # Initialize the reference and target systems
    systems = {"names" : [sysA, sysB], "topols" : []}
    atoms_A, atoms_B = dict(), dict()
    residues = ["ACE", "NME", "ETG", "E1G", "E2G", "E3G"]

    # Extract data on the 2 states
    for i, sys in enumerate(systems["names"]):
        # Read in relevant lines from the topology file
        topol, topol_atoms = read_topol("{}_topol.top".format(sys), residues)
        systems["topols"].append(topol)
        # Extract information on individual atoms in the topology
        for line in topol_atoms:
            if i == 0:
                atoms_A[int(line[0])] = Atom(line)
            else:
                atoms_B[int(line[0])] = Atom(line)

    # Determine the coupling charge and mass as a function of lambda
    coupled_charges, coupled_masses = [], []

    for i in range(len(atoms_A)):
        atomA, atomB = atoms_A[i+1], atoms_B[i+1]
        charge_AB = (1 - coupl_param) * atomA.charge \
                        + coupl_param * atomB.charge
        mass_AB =  (1 - coupl_param) * atomA.mass + coupl_param * atomB.mass
        coupled_charges.append(np.round(charge_AB, 4))
        coupled_masses.append(np.round(mass_AB, 3))

    # Edit the reference topology to make a new topology with the coupled
    # parameters
    i, q_tot = 0, 0
    new_topol_file = "{}-{}/{}K/lambda_{}/topol.top".format(sysA, sysB, \
                    temperature, "{:>0{f}}".format(int(coupl_param * 100), f=3))
    if os.path.exists(new_topol_file):
        os.remove(new_topol_file)

    with open(new_topol_file, "w") as file:
        for line in systems["topols"][0]:
            bool = any(map(lambda v: v in residues, line.split()))
            if bool and ";" != line[0]:
                charge = "{:.4f}".format(coupled_charges[i])
                new_charge = "{:>{f}}".format(charge, f=8)
                new_mass = "{:0<{f}}".format(str(coupled_masses[i]), f=5)
                q_tot += coupled_charges[i]
                new_line = line[:48] + new_charge + line[56:62] + new_mass[:5] \
                                + line[67:77] + str(np.round(q_tot, 4)) + "\n"
                i += 1
                line = new_line
            file.write(line)

    return exit(0)

class Atom():
    """The Atom class keeps track of attributes of atoms in the topology

    Submit the relevant line from the topology file (i.e. "topol.top") to get an
    Atom object.
    """

    def __init__(self, topol):
        self.num = int(topol[0])
        self.type = topol[1]
        self.residue = topol[3]
        self.name = topol[4]
        self.charge = float(topol[6])
        self.mass = float(topol[7])

    def __str__(self):
        return "Number: {}, Type: {}, Residue: {}, Name: {}, Mass: {}00"\
            .format(self.num, self.type, self.residue, self.name, self.mass)

def read_topol(topol="topol.top", residues=[]):
    """Read in a topology file.

    Parameters
    ----------
    topol : file
        A topology file generated by GROMACS (e.g. gmx pdb2gro ...). The
        residues must be included in the residues list for atom line extraction.
    residues : (str) list
        A list of 3/4 letter residue codes, given in the topology.

    Returns
    -------
    top_file : (str) list
        A list containing strings of the individual lines from the topology
        file.
    atoms : (str) list
        A list of the lines containing atom specifications from the topology.

    """
    try:
        with open(topol, "r") as file:
            top_file = file.readlines()
    except OSError:
            print("topology file not found.")
            exit(1)
    atoms = []
    for i, line in enumerate(top_file):
        if ";" == line[0]:
            continue
        line_list = line.split()
        if any(map(lambda v: v in residues, line_list)):
            atoms.append(line_list)

    return top_file, atoms

if __name__ ==  '__main__':
    main(argv)
    exit(0)
